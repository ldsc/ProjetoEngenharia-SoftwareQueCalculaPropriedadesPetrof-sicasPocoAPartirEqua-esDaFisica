#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children false
\language brazilian
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\backslash
rhead{
\backslash
thepage} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste capítulo do projeto de engenharia veremos questões associadas ao projeto
 do sistema, incluindo protocolos, recursos, plataformas suportadas, inplicações
 nos diagramas feitos anteriormente, diagramas de componentes e implantação.
 Na segunda parte revisamos os diagramas levando em conta as decisões do
 projeto do sistema.
\end_layout

\begin_layout Section
Projeto do sistema
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
Depois da análise orientada a objeto desenvolve-se o projeto do sistema,
 o qual envolve etapas como a definição dos protocolos, da interface API,
 o uso de recursos, a subdivisão do sistema em subsistemas, a alocação dos
 subsistemas ao hardware e a seleção das estruturas de controle, a seleção
 das plataformas do sistema, das biblitotecas externas, dos padrões de projeto,
 além da tomada de decisões conceituais e políticas que formam a infraestrutura
 do projeto.
\end_layout

\begin_layout Standard
Deve-se definir padrões de documentação, padrões de retorno e de parâmetros
 em métodos, características da interface do usuário e características de
 desempenho.
\end_layout

\begin_layout Standard
Para o desenvolvimento do projeto é necessário se preocupar com itens como:
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A única intercomunicação é entre o software desenvolvido é o componente
 externo, Gnuplot.
 Este plotará todos os gráficos que o usuário desejar;
\end_layout

\begin_layout Itemize
O software terá entrada de dados importando arquivos com extensão .dat e
 receberá dados via teclado;
\end_layout

\begin_layout Itemize
A interface utilizada será em modo texto.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O presente software utilizará HD, o processador, o teclado, a memória, a
 tela e os demais componentes do computador.
\end_layout

\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto o controle será sequencial;
\end_layout

\begin_layout Itemize
Neste projeto todos os cálculos necessitam de estruturas de repetição, pois
 são feitos ao longo da profundidade do poço.
 É independente do tempo.
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O software é multiplataforma, funciona no Windows e GNU/Linux;
\end_layout

\begin_layout Itemize
A linguagem utilizada é C++;
\end_layout

\begin_layout Itemize
O software acessa a biblioteca externa CGuplot que permite o acesso ao gerador
 de gráficos Gnuplot.
\end_layout

\end_deeper
\begin_layout Section
Projeto orientado a objeto -- POO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise, mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida
 (hardware, sistema operacional e linguagem de programação).
 Passa pelo maior detalhamento do funcionamento do software, acrescentando
 atributos e métodos que envolvem a solução de problemas específicos não
 identificados durante a análise.
\end_layout

\begin_layout Standard
Envolve a otimização da estrutura de dados e dos algoritmos, a minimização
 do tempo de execução, de memória e de custos.
 Existe um desvio de ênfase para os conceitos da plataforma selecionada.
 
\end_layout

\begin_layout Standard
Exemplo: na análise você define que existe um método para salvar um arquivo
 em disco, define um atributo nomeDoArquivo, mas não se preocupa com detalhes
 específicos da linguagem.
 Já no projeto, você inclui as bibliotecas necessárias para acesso ao disco,
 cria um objeto específico para acessar o disco, podendo, portanto, acrescentar
 novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "sub:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Novas classes e associações oriundas das bibliotecas selecionadas e da linguagem
 escolhida devem ser acrescentadas ao modelo.
\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto foi feito associações, composições e heranças que podem ser
 visualizadas no diagrama de classe, Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-classes"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "sub:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Os diagramas de sequência e comunicação foram modificados a medida que a
 implementação foi desenvolvida.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
O diagrama de classe, foi completamente modificado, heranças foram descontruidas
 e associações e composições foram feitas, Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-classes"

\end_inset

;
\end_layout

\begin_layout Itemize
Todos os métodos foram alterados;
\end_layout

\begin_layout Itemize
De maneira geral os métodos devem ser divididos em dois tipos: i) tomada
 de decisões, métodos políticos ou de controle; devem ser claros, legíveis,
 flexíveis e usam polimorfismo.
 ii) realização de processamentos, podem ser otimizados e em alguns casos
 o polimorfismo deve ser evitado.
 
\end_layout

\begin_layout Itemize
Neste projeto todos os métodos estão correspondendo às respectivas responsabilid
ades.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Além da herança que havia entre CSaturacaoArquieModificada e CSaturacaoArquieNor
mal outras foram acrescentadas, as classes CDensidade, CGamaRay, CProfunsidade
 e CResistividade herdaram a classe CPerfil.
 
\end_layout

\begin_layout Section
Diagrama de componentes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de componentes mostra a forma como os componentes do software
 se relacionam, suas dependências.
 Inclui itens como: componentes, subsistemas, executáveis, nós, associações,
 dependências, generalizações, restrições e notas.
 Exemplos de componentes são bibliotecas estáticas, bibliotecas dinâmicas,
 dlls, componentes Java, executáveis, arquivos de disco, código-fonte.
 
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-componentes"

\end_inset

 um exemplo de diagrama de componentes.
 A geração da biblioteca depende dos arquivos de classe de extensão .h e
 .cpp.
 O software executável a ser gerado depende da biblioteca gerada, dos arquivos
 da biblioteca, dos arquivos desta e do banco de dados.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../imagens/Diagrama_componentes_final.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de implantação
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de implantação é um diagrama que inclui relações entre o sistema
 e o hardwar e deve incluir elementos necessários para que o sistema seja
 colocado em funcionamento: computador, periféricos, processadores, dispositivos
, nós, relacionamentos de dependência, associação, componentes, subsistemas,
 restrições e notas.
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-implantação."

\end_inset

 um exemplo de diagrama de implantação do software.
 Primeiramente, os perfis registram as propriedades e a profundidade, enviando
 os dados para um computador na superfície.
 Esses arquivos são gerados em formato .dat.
 O software importa os dados deste arquivo e na execução precisa de um monitor
 para mostrar os resultados.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../imagens/Diagrama_execucao_final.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de execução
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
